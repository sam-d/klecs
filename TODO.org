* TODO implement py-vdgl within this library
* TODO find solution for sequencing several world transformation
* TODO re-think update-components procedure: is it needed at all? Does it really need a default value?
* TODO create a 'best-practice' library that implements common patterns
This should also become apparent when implementing VGDL.
What worked so far: directed-move procedure, spawn points, animation
* TODO Try to interface with another graphics library e.g. SDL2 through chickadee
* TODO Implement a serializer for world, which would allow to save a game at any state
Also think if this can be implemented in a way to allow roll-backs
Can this be seralized to a database e.g. using SQLite or a key-value store like dbm?
https://t-machine.org/index.php/2009/10/26/entity-systems-are-the-future-of-mmos-part-5/
* TODO Include a version where the world, component-map etc... is backed by a relational DB
The database is then the world that gets passed around. The world is hereby serialized automatically. Provide a new version for each function in (klecs ecs) that read/write to the DB. Usercode should not need to change at all (test on your space-invader)
* TODO Think on how to parallelize running systems
Either run several systems in parallel or run 1 system over several entities in parallel
* DONE get-components: when retrieving tags (i.e. components without values) return #t
CLOSED: [2023-10-21 Sat 13:34]
Currently a query against all entities cannot differentiate between those entities that have a tag or not as due to the missing value it will always return #f
(get-components world (query) 'tag) -> returns all ids and a list with all false values, whether there are entities with (component 'tag') or not
* DONE bug in query with or: does not work for more than 2 expressions
CLOSED: [2023-10-21 Sat 13:34]
